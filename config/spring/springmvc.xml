<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	
	<!-- 对于注解的Handler进行组件扫描 -->
	<context:component-scan base-package="jun.ssm.controller"></context:component-scan>
	
	<!-- 静态资源的解析 
	包括：js、css、img...
	-->
	<mvc:resources location="/js/" mapping="/js/**"></mvc:resources>
	<!-- <mvc:resources location="/img/" mapping="/img/**"></mvc:resources> -->
	
	<!-- 使用mvc:annotation-driven代替上边的注解映射器和注解适配器 
	mvc:annotation-driven默认加载很多的参数绑定方法，比如json转换解析器就默认加载了
	实际开发使用这种方法
	-->
	<mvc:annotation-driven conversion-service="conversionService" 
	validator="validator">
	</mvc:annotation-driven>
	<!-- 自定义参数绑定 -->
	<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<!-- 转换器 -->
		<property name="converters">
			<list>
				<!-- 日期类型转换 -->
				<bean class="jun.ssm.controller.converter.CustomDateConverter"></bean>
			</list>
		</property>
	</bean>
	<!-- 配置校验器 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
   	 <!-- 校验器，使用hibernate校验器 -->
    	<property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
    <!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下面的ValidationMessages.properties文件 -->
    	<property name="validationMessageSource" ref="messageSource"/>
	</bean>
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
   	 <!-- 资源文件名 -->
   	 <property name="basenames">
        <list>
            <value>classpath:CustomValidationMessage</value>
        </list>
    </property>
    <!-- 资源文件编码格式 -->
    <property name="fileEncodings" value="utf-8"/>
    <!-- 对资源文件内容缓存时间，单位秒 -->
    <property name="cacheSeconds" value="120"/>
	</bean>
	
	<!-- 文件上传,需要配置MultipartResolver处理器 -->
	<!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    设置船上文件的最大尺寸为5MB
    	<property name="maxUploadSize" value="5242880"/>
    	<property name="defaultEncoding" value="utf-8"/>   
	</bean> -->
	
	<!-- 拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/><!-- 表示拦截所有的url路径 -->
			<bean class="jun.ssm.interceptor.LoginInterceptor"></bean>	
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**"/><!-- 表示拦截所有的url路径 -->
			<bean class="jun.ssm.interceptor.HandlerInterceptor1"></bean>	
		</mvc:interceptor>
		<!-- 多个拦截器按顺序执行 -->
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="jun.ssm.interceptor.HandlerInterceptor2"></bean>	
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 视图解析器
	解析jsp，默认使用jstl，classpath下需要jstl包
	 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"></bean>

</beans>